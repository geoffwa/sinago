<?php

// TODO example

class Config {

  // name => value pairs to go into the config block
  private $attributes;

  // attributes that will not be serialized to config
  private static function ignorable_attributes() {
    return array( 'base_path', 'datacenter', 'type' );
  }

  // nagios config types we 'recognise'
  private static function valid_types() {
    return array('host', 'service');
  }
  private static function is_valid_type($type) {
    return in_array($type, self::valid_types());
  }

  // get the currently set attributes that we should write out
  private function writable_attributes() {
    $writable = $this->attributes;
    foreach ($this->ignorable_attributes() as $ignore) {
      unset($writable[$ignore]);
    }
    return $writable;
  }

  public function __construct($base_path, $type) {
    if (!self::is_valid_type($type)) {
      $trace = debug_backtrace();
      trigger_error(
        'Unrecognised type: ' . $type .
        ' in ' . $trace[0]['file'] .
        ' on line ' . $trace[0]['line'],
        E_USER_NOTICE);
    }

    $this->attributes = array(
      'base_path' => $base_path,
      'type' => $type,
    );
  }

  // get the filename ->write_out will write to
  public function filename() {
    $pieces = array($this->base_path);

    array_push($pieces, $this->host_name);
    if ($this->type === 'host') {
      array_push($pieces, 'host.cfg');
    }
    else {
      array_push($pieces, $this->service_description . '.cfg');
    }

    return implode('/', $pieces);
  }

  // serialize out $attributes as a nagios cfg file
  public function write_out() {
    $filename = $this->filename();
    $dir = dirname($filename);

    if (!file_exists($dir)) {
      mkdir($dir, 0777, true);
    }

    $file = fopen($this->filename(), 'w');
    fwrite($file, "; note - autogenerated file\n");
    fwrite($file, 'define ');
    fwrite($file, $this->type);
    fwrite($file, " {\n");

    // TODO - some column formatting would be nice :)
    foreach ($this->writable_attributes() as $key => $value) {
      fwrite($file, "\t");
      fwrite($file, $key);
      fwrite($file, "\t");
      fwrite($file, $value);
      fwrite($file, "\n");
    }

    fwrite($file, "}\n");
    fclose($file);
  }

  //
  // BEGIN - magic methods to make $attributes look like properties
  //

  public function __set($name, $value) {
    $this->attributes[$name] = $value;
  }

  public function __get($name) {
    if (array_key_exists($name, $this->attributes)) {
      return $this->attributes[$name];
    }

    $trace = debug_backtrace();
    trigger_error(
      'Undefined property via __get(): ' . $name .
      ' in ' . $trace[0]['file'] .
      ' on line ' . $trace[0]['line'],
      E_USER_NOTICE);
    return null;
  }

  public function __isset($name) {
    return isset($this->attributes[$name]);
  }

  public function __unset($name) {
    unset($this->attributes[$name]);
  }

}

?>
